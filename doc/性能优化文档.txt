性能优化:
==============================
1,如何去优化自己现有的项目,运行更近流程
app进程  16M,32M,64M

2,以后开发项目的时候就要从一开始就摆好发车车技


-------------------------------内存泄露-------------------------------
C/C++ 自己去分配内存和释放内存---手动管理
malloc free
什么是内存泄露:内存不在掌控之内了
             当一个对象已经不需要再使用了,本该被回收时,二有另外一个正在使用的对象持有他的引
             用从而就导致对象不能被回收,这种导致了本该被回收的对象不能被回收二停留在堆内存中
             ,就产生了内存泄露

内存抖动:
了解GC:某对象不再有任何的引用的时候才会进行回收
了解呢次分配的几种策略:
1,静态的
        静态的存储区:内存在程序编译的时候就已经分配好,这块的呢次在程序整个运行期间都一直存在
        它主要存放静态数据\全局的static数据和一些常量
2,栈式的
        在执行函数(方法)时,函数一些内部变量的存储都可以放在栈上面创建,
        函数执行结束的时候这些存储单元就会自动被释放掉.栈内存包括分配的运算速度很快,
        因为内置在处理器的里面的,当然容量有限
3,堆式的
        也叫作动态内存分配,有时候可以用malloc或new 来申请分配一个内存,在c/c++可能需要自己负责释放
        (java里面直接依赖GC)
区别:
        堆式不连续的内存区域,堆空间比较灵活也特别大
        栈是一块连续的内存区域,大小是由操作系统决定的

堆管理很麻烦,频繁的new/remove会造成大量的内存碎片,这样就会慢慢导致效率地下
对于栈的话,先进后出,进出完全不会产生碎片,运行效率高且稳定

public class Main{
    int a = 1;
    Student a = new Student();
    public void XXX() {
        int b = 1;
        Student s = new Student();
    }
}

1,成员变量全部存储在堆中(包括基本数据类型,引用的对象实体)---因为他们属于类,类对象最终还是要被new出来的
2,局部变量的基本数据类型和引用存储于栈当中.----因为他们属于方法当中的变量,生命周期会随着方法而变


我们所讨论的内存泄露,主要讨论堆内,它存放的就是引用只想的对象实体

比如:ListView或者GridView\RecyclerView加载大量数据或者图片的时候
    图片非常占用内存,一定要管理好内存,不然很容易内存溢出
    滑出去的图片就回收,节省内存,看ListView的源码----回收对象,还会重用convertView
    如果用户反复滑动或者下面
    LRU算法
    特殊的java类:利于回收,StrongReference\SoftReference\WeakReference\PhatomReference

StrongReference:
        回收时机:从不回收  使用:对象的一般保存  生命周期:JVM停止的时候才会终止
SoftReference:
        回收时机:当内存不足的时候:使用:SoftReference<String>结合ReferenceQueue构造有效期短, 生命周期:内存不足时终止
WeakReference:
        回收时机:在垃圾回收的时候, 使用:同软引用 生命周期:GC后终止
PhatomReference:虚引用
        回收时机:在垃圾回收的时候, 使用:

开发时:为了防止内存溢出,处理一些比较占用内存大并且生命周期长的对象的时候,可以尽量使用软引用和弱引用
软引用比LRU算法更近任性,回收量是比较大的,你无法控制回收哪些对象

比如使用场景:
            默认头像,默认图标,ListView GridView 要使用内存缓存+外部存储

----------------------------------内存泄露例子---------------------------------
1,单例模式导致内存对象无法释放
        能用application的context就用application的
        CommonUtil生命周期和application进程同生同死

//关于堆栈知识的地址:
http://uule.iteye.com/blog/1417299































